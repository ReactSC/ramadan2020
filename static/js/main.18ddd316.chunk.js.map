{"version":3,"sources":["components/SingleLine.jsx","components/ListView.jsx","components/SingleBox.jsx","components/GirdView.jsx","components/App.js","serviceWorker.js","index.js"],"names":["SingleLine","props","ramadan","date","sehar","iftar","fajr","ListView","settings","t","dhaka","map","time","index","key","SingleBox","texts","className","GirdView","App","useState","db","districts","divisions","h","m","userDistrict","userLang","theme","view","en","popup","state","setState","useEffect","lang","bn","title","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18ddd316.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SingleLine = props => {\r\n  const { ramadan, date, sehar, iftar } = props\r\n  const fajr = sehar + 10\r\n  return (\r\n    <tr>\r\n      <td>{ramadan}</td>\r\n      <td>{date}</td>\r\n      <td>{sehar}</td>\r\n      <td>{fajr}</td>\r\n      <td>{iftar}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default SingleLine\r\n","import React from 'react'\r\nimport SingleLine from './SingleLine'\r\n\r\nconst ListView = props => {\r\n  const { ramadan, date, sehar, fajr, iftar } = props.settings.t\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            {ramadan}\r\n          </th>\r\n          <th>\r\n            {date}\r\n          </th>\r\n          <th>\r\n            {sehar}\r\n          </th>\r\n          <th>\r\n            {fajr}\r\n          </th>\r\n          <th>\r\n            {iftar}\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.dhaka.map((time, index) => {\r\n            return (\r\n              <SingleLine\r\n                key={index}\r\n                ramadan={index + 1}\r\n                date={time.date}\r\n                sehar={time.sehar}\r\n                iftar={time.iftar}\r\n              />\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ListView\r\n","import React from 'react'\r\n\r\nconst SingleBox = props => {\r\n  const { ramadan, date, sehar, iftar, texts } = props\r\n  const fajr = sehar + 10\r\n  return (\r\n    <div className=\"single-box\">\r\n      <h1>{ramadan}</h1>\r\n\r\n      <span>{texts.date}:</span>\r\n      <span>{date}</span>\r\n\r\n      <div className=\"box-time\">\r\n        <span>{texts.sehar}: </span>\r\n        <span>{sehar}</span>\r\n\r\n        <span>{texts.fajr}: </span>\r\n        <span>{fajr}</span>\r\n\r\n        <span>{texts.iftar} : </span>\r\n        <span>{iftar}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleBox\r\n","import React from 'react'\r\nimport SingleBox from './SingleBox'\r\n\r\nconst GirdView = props => {\r\n  return (\r\n    <div className=\"box-wrap\">\r\n      {\r\n        props.dhaka.map((time, index) => {\r\n          return (\r\n              <SingleBox\r\n                key={index}\r\n                ramadan={index + 1}\r\n                date={time.date}\r\n                sehar={time.sehar}\r\n                iftar={time.iftar}\r\n                texts={props.settings.t}\r\n              />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GirdView\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport * as db from './store/db.json'\nimport ListView from './ListView'\nimport GirdView from './GirdView'\n\nconst App = () => {\n  const [state, setState] = useState({\n    dhaka: db.dhaka,\n    districts: db.districts,\n    divisions: db.divisions,\n    h: db.h,\n    m: db.m,\n    settings: {\n      userDistrict: 'pabna',\n      userLang: 'en',\n      theme: 'dark',\n      view: 'list',\n      t: db.translate.en\n    },\n    popup: true\n  })\n\n  useEffect(() => {\n    const tr = lang => {\n      lang === 'en' && setState({ ...state, settings: { ...state.settings, t: db.translate.en } })\n      lang === 'bn' && setState({ ...state, settings: { ...state.settings, t: db.translate.bn } })\n    }\n    tr(state.settings.userLang)\n\n  }, [])\n  \n\n  state.settings.userLang = 'en'\n  state.settings.view = 'grid'\n  return (\n    <div className=\"App\">\n      <h1>{state.settings.t.title}</h1>\n      {\n        state.settings.view === 'list' ?\n          <ListView {...state} /> :\n            state.settings.view === 'grid' ?\n              <GirdView {...state} /> :\n                <ListView {...state} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}