{"version":3,"sources":["components/store/context.js","components/SingleLine.jsx","components/ListView.jsx","components/SingleBox.jsx","components/GirdView.jsx","components/SettingsPopUp.jsx","components/App.js","serviceWorker.js","index.js"],"names":["RamadanContext","createContext","RamadanProvider","props","useState","dhaka","db","districts","divisions","h","m","settings","userDistrict","userLang","layout","t","bn","popup","settingsPopUp","state","setState","access","data","others","functions","changeCity","city","changeLang","lang","en","changeLayout","console","log","popUp","Provider","value","children","SingleLine","ramadan","date","sehar","iftar","fajr","ListView","time","useContext","map","index","key","SingleBox","texts","className","GirdView","SettingsPopUp","fn","changeHandler","e","target","name","htmlFor","selectCity","id","title","onChange","i","selectLang","selectLayout","App","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","app","StrictMode","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2a2b40c.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\nimport * as db from './db.json'\r\n\r\nexport const RamadanContext = createContext()\r\n\r\nconst RamadanProvider = props => {\r\n  const [state, setState] = useState({\r\n    dhaka: db.dhaka,\r\n    districts: db.districts,\r\n    divisions: db.divisions,\r\n    h: db.h,\r\n    m: db.m,\r\n    settings: {\r\n      userDistrict: 'pabna',\r\n      userLang: 'en',\r\n      layout: 'gird',\r\n      t: db.translate.bn\r\n    },\r\n    popup: true,\r\n    settingsPopUp: false\r\n  })\r\n\r\n\r\n  const changeCity = city => {\r\n    setState({\r\n      ...state,\r\n      settings: {\r\n        ...state.settings,\r\n        userDistrict: city\r\n      }\r\n    })\r\n  }\r\n\r\n  const changeLang = lang => {\r\n    setState({\r\n      ...state,\r\n      settings: {\r\n        ...state.settings,\r\n        userLang: lang,\r\n        t: lang === 'bn' ? db.translate.bn : db.translate.en\r\n      }\r\n    })\r\n  }\r\n  const changeLayout = layout => {\r\n    setState({\r\n      ...state,\r\n      settings: {\r\n        ...state.settings,\r\n        layout: layout,\r\n      }\r\n    })\r\n    console.log(layout)\r\n  }\r\n\r\n  const popUp = () => {\r\n    setState({\r\n      ...state,\r\n      popUp: !state.popUp\r\n    })\r\n  }\r\n\r\n  const settingsPopUp = () => {\r\n    setState({\r\n      ...state,\r\n      settingsPopUp: !state.settingsPopUp\r\n    })\r\n  }\r\n\r\n\r\n  const access = {\r\n    data: {\r\n      dhaka: state.dhaka,\r\n      districts: state.districts,\r\n      divisions: state.divisions,\r\n    },\r\n    settings: state.settings,\r\n    others: {\r\n      h: state.h,\r\n      m: state.m,\r\n      popup: state.popup,\r\n      settingsPopUp: state.settingsPopUp\r\n    },\r\n    functions: {\r\n      changeCity,\r\n      changeLang,\r\n      changeLayout,\r\n      popUp,\r\n      settingsPopUp\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RamadanContext.Provider value={access}>\r\n      {props.children}\r\n    </RamadanContext.Provider>\r\n  );\r\n};\r\nexport default RamadanProvider;","import React from 'react'\r\n\r\nconst SingleLine = props => {\r\n  const { ramadan, date, sehar, iftar } = props\r\n  const fajr = sehar + 10\r\n  return (\r\n    <tr>\r\n      <td>{ramadan}</td>\r\n      <td>{date}</td>\r\n      <td>{sehar}</td>\r\n      <td>{fajr}</td>\r\n      <td>{iftar}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default SingleLine\r\n","import React, { useContext } from 'react'\r\nimport { RamadanContext } from './store/context'\r\nimport SingleLine from './SingleLine'\r\n\r\nconst ListView = () => {\r\n  const time = useContext(RamadanContext).data.dhaka\r\n  const settings = useContext(RamadanContext).settings\r\n  const { ramadan, date, sehar, fajr, iftar } = settings.t\r\n  \r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            {ramadan}\r\n          </th>\r\n          <th>\r\n            {date}\r\n          </th>\r\n          <th>\r\n            {sehar}\r\n          </th>\r\n          <th>\r\n            {fajr}\r\n          </th>\r\n          <th>\r\n            {iftar}\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          time.map((time, index) => {\r\n            return (\r\n              <SingleLine\r\n                key={index}\r\n                ramadan={index + 1}\r\n                date={time.date}\r\n                sehar={time.sehar}\r\n                iftar={time.iftar}\r\n              />\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default ListView\r\n","import React from 'react'\r\n\r\nconst SingleBox = props => {\r\n  const { ramadan, date, sehar, iftar, texts } = props\r\n  const fajr = sehar + 10\r\n  return (\r\n    <div className=\"single-box\">\r\n      <h1>{ramadan}</h1>\r\n\r\n      <h3>{date}</h3>\r\n\r\n      <table className=\"box-time\">\r\n        <thead>\r\n          <tr>\r\n            <th>{texts.sehar}</th>\r\n            <th>{texts.fajr}</th>\r\n            <th>{texts.iftar}</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td>{sehar}</td>\r\n            <td>{fajr}</td>\r\n            <td>{iftar}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleBox\r\n","import React, {useContext} from 'react'\r\nimport SingleBox from './SingleBox'\r\nimport { RamadanContext } from './store/context'\r\n\r\n\r\n\r\nconst GirdView = () => {\r\n  const time = useContext(RamadanContext).data.dhaka\r\n  const settings = useContext(RamadanContext).settings\r\n  return (\r\n    <div className=\"box-wrap\">\r\n      {\r\n        time.map((time, index) => {\r\n          return (\r\n              <SingleBox\r\n                key={index}\r\n                ramadan={index + 1}\r\n                date={time.date}\r\n                sehar={time.sehar}\r\n                iftar={time.iftar}\r\n                texts={settings.t}\r\n              />\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GirdView\r\n","import React, { useContext, useState } from 'react'\r\nimport { RamadanContext } from './store/context'\r\n\r\n\r\nconst SettingsPopUp = () => {\r\n  const fn = useContext(RamadanContext).functions\r\n  const data = useContext(RamadanContext).data\r\n  const settings = useContext(RamadanContext).settings\r\n\r\n  const [state, setState] = useState({\r\n    city: 'Pabna',\r\n    lang: 'bn',\r\n    layout: settings.layout\r\n  })\r\n  \r\n  const changeHandler = e => {\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value\r\n    })\r\n    fn.changeCity(e.target.value)\r\n    switch (e.target.name) {\r\n      case 'city':\r\n        break;\r\n        case 'lang':\r\n          fn.changeLang(state.lang)\r\n          break;\r\n          case 'layout':\r\n            fn.changeLayout(state.layout)\r\n        break;\r\n    \r\n      default:\r\n        return state\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"s-popup\">\r\n      <label htmlFor=\"city\">{settings.t.selectCity}</label>\r\n      <select\r\n        name=\"city\"\r\n        id=\"city\"\r\n        title={settings.t.selectCity}\r\n        value={state.city}\r\n        onChange={ changeHandler} >\r\n        <option value=\"Pabna\">\r\n          {settings.userLang === 'bn' ? 'পাবনা' : 'Pabna'}\r\n        </option>\r\n        {\r\n          data.districts.map((city, i) =>\r\n            <option key={i} value={city.name.en}>\r\n              {settings.userLang === 'bn' ? city.name.bn : city.name.en }\r\n            </option>\r\n          )\r\n        }\r\n      </select>\r\n\r\n      <label htmlFor=\"lang\">{settings.t.selectLang}</label>\r\n      <select\r\n        name=\"lang\"\r\n        id=\"lang\"\r\n        value={state.lang}\r\n        onChange={ changeHandler} >\r\n          <option value=\"en\">English</option>\r\n          <option value=\"bn\">বাংলা</option>\r\n      </select>\r\n\r\n      <label htmlFor=\"layout\">{settings.t.selectLayout}</label>\r\n      <select\r\n        name=\"layout\"\r\n        id=\"layout\"\r\n        value={state.layout}\r\n        onChange={ changeHandler} >\r\n          <option value=\"list\">List</option>\r\n          <option value=\"gird\">Gird</option>\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SettingsPopUp\r\n","import React, { useContext } from 'react';\nimport './App.css';\nimport ListView from './ListView'\nimport GirdView from './GirdView'\nimport SettingsPopUp from './SettingsPopUp'\n\nimport { RamadanContext } from './store/context';\n\nconst App = () => {\n  const state = useContext(RamadanContext)\n\n  const settingsPopUpHandler = () => {\n    state.functions.settingsPopUp()\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\" >\n        <h1 onClick={settingsPopUpHandler}>{state.settings.t.title}</h1>\n        {state.others.settingsPopUp && <SettingsPopUp />}\n      </div>\n      {state.settings.layout === 'gird' && <GirdView />}\n      {state.settings.layout === 'list' && <ListView />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport Provider from './components/store/context';\n\nconst app = (\n  <React.StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </React.StrictMode>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}